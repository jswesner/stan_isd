crops = c(0, 0.01, 0.1, 0.3, 0.5, 0.75) # get the whole data set or the lower or upper 50%, 10%, etc
rep = 1:4
n_bs = length(crops)*length(rep)*length(b_true)
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.01)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda") +
theme_default()
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.01)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda") +
scale_x_log10() +
theme_default()
sim_data = sim_data_tibble %>%
group_by(crop, rep, lambda, sizes) %>%
mutate(xmin_x = min(x),
xmax_x = max(x)) %>%
group_split()
# preallocate
posts_single = list()
# fit
for (i in 1:n_bs) {
true_lambda = unique(sim_data[[i]]$lambda)
crop = unique(sim_data[[i]]$crop)
rep = unique(sim_data[[i]]$rep)
sizes = unique(sim_data[[i]]$sizes)
stan_dat <- list(x = sim_data[[i]]$x,
N = nrow(sim_data[[i]]),
counts = sim_data[[i]]$counts,
xmax = sim_data[[i]]$xmax_x,
xmin = sim_data[[i]]$xmin_x)
fit <- sampling(object = fit_model,
data = stan_dat,
iter = 1000,
chains = 2,
open_progress = F,
verbose = F)
posts_single[[i]] = as_draws_df(fit) %>%
mutate(true_lambda = true_lambda,
crop = crop,
rep = rep,
sizes = sizes)
}
recover_sims = bind_rows(posts_single)
parameter_recovery_withcounts = recover_sims %>%
group_by(crop, rep, true_lambda, sizes) %>%
median_qi(lambda) %>%
rename(b_modeled = lambda) %>%
mutate(crop = case_when(crop == 0 & grepl("smallest", sizes) ~ 1, TRUE ~ crop))
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.01)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda") +
scale_x_log10() +
theme_default()
unique(sim_data_tibble$crop)
sim_data %>% group_by(crop, lambda, rep, sizes) %>% mutate(id = cur_group_id())
sim_data %>% group_by(crop, lambda, rep, sizes) %>% cur_group_id()
sim_data_tibble %>% group_by(crop, lambda, rep, sizes) %>%  mutate(group = cur_group_id())
sim_data_tibble = bind_rows(sim_largest, sim_smallest) %>%
group_by(crop, lambda, rep, sizes) %>%  mutate(group = cur_group_id())
max(sim_data_tibble$group   )
# check
sim_data_tibble %>%
ggplot(aes(x = crop, y = x, color = rep)) +
geom_jitter() +
facet_wrap(~sizes)
sim_data = sim_data_tibble %>%
group_by(crop, rep, lambda, sizes) %>%
mutate(xmin_x = min(x),
xmax_x = max(x)) %>%
group_split()
# preallocate
posts_single = list()
# fit
for (i in 1:max(sim_data_tibble$group)) {
true_lambda = unique(sim_data[[i]]$lambda)
crop = unique(sim_data[[i]]$crop)
rep = unique(sim_data[[i]]$rep)
sizes = unique(sim_data[[i]]$sizes)
stan_dat <- list(x = sim_data[[i]]$x,
N = nrow(sim_data[[i]]),
counts = sim_data[[i]]$counts,
xmax = sim_data[[i]]$xmax_x,
xmin = sim_data[[i]]$xmin_x)
fit <- sampling(object = fit_model,
data = stan_dat,
iter = 1000,
chains = 2,
open_progress = F,
verbose = F)
posts_single[[i]] = as_draws_df(fit) %>%
mutate(true_lambda = true_lambda,
crop = crop,
rep = rep,
sizes = sizes)
}
recover_sims = bind_rows(posts_single)
parameter_recovery_withcounts = recover_sims %>%
group_by(crop, rep, true_lambda, sizes) %>%
median_qi(lambda) %>%
rename(b_modeled = lambda) %>%
mutate(crop = case_when(crop == 0 & grepl("smallest", sizes) ~ 1, TRUE ~ crop))
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.01)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda") +
scale_x_log10() +
theme_default()
sim_data[[110]]
max(sim_data_tibble$group)
sim_largest
sim_largest = sim_b %>%
expand_grid(individual = 1:n_sim) %>%
mutate(u = runif(nrow(.), min = 0, max = 1),
sims = (u*xmax^(lambda+1) +  (1-u) * xmin^(lambda+1) ) ^ (1/(lambda+1))) %>%
group_by(lambda, xmin, xmax, group, sample_size, crop, rep) %>%
mutate(x = round(sims, 3)) %>%
count(x, name = "counts") %>%
mutate(sample_size = n_row(.),
limit = xmax*crop,
greater = case_when(x >= limit ~ 1,
crop == 0 ~ 1,
TRUE ~ 0),
sizes = "largest quantiles") %>%
filter(greater == 1)
sim_largest = sim_b %>%
expand_grid(individual = 1:n_sim) %>%
mutate(u = runif(nrow(.), min = 0, max = 1),
sims = (u*xmax^(lambda+1) +  (1-u) * xmin^(lambda+1) ) ^ (1/(lambda+1))) %>%
group_by(lambda, xmin, xmax, group, sample_size, crop, rep) %>%
mutate(x = round(sims, 3)) %>%
count(x, name = "counts") %>%
mutate(sample_size = nrow(.),
limit = xmax*crop,
greater = case_when(x >= limit ~ 1,
crop == 0 ~ 1,
TRUE ~ 0),
sizes = "largest quantiles") %>%
filter(greater == 1)
sim_largest
length(sim_data[[22]]$x
)
sim_data_tibble = bind_rows(sim_largest, sim_smallest) %>%
group_by(crop, lambda, rep, sizes) %>%
mutate(group = cur_group_id())
sim_data = sim_data_tibble %>%
group_by(crop, rep, lambda, sizes) %>%
mutate(xmin_x = min(x),
xmax_x = max(x)) %>%
group_split()
sim_data[[222]]
sim_data[[141]]
sim_data[[140]]
sim_data[[122]]
sim_data[[1233]]
sim_data[[123]]
View(sim_data_tibble)
sim_data_tibble %>% group_by(group) %>% tally()
sim_data_tibble %>% group_by(group) %>% tally() %>% filter(n<= 20)
sim_data_tibble %>% group_by(group) %>% tally() %>% filter(n<= 20) %>% View()
sim_data_tibble %>% group_by(group) %>% tally() %>% View()
max(sim_data_tibble$group)
sim_data_tibble = bind_rows(sim_largest, sim_smallest) %>%
group_by(crop, lambda, rep, sizes) %>%
mutate(group = cur_group_id())
sim_data = sim_data_tibble %>%
group_by(crop, rep, lambda, sizes) %>%
mutate(xmin_x = min(x),
xmax_x = max(x)) %>%
group_split()
sim_data[[137]]
sim_data[[138]]
# fit
for (i in 1:max(sim_data_tibble$group)) {
true_lambda = unique(sim_data[[i]]$lambda)
crop = unique(sim_data[[i]]$crop)
rep = unique(sim_data[[i]]$rep)
sizes = unique(sim_data[[i]]$sizes)
cropped_sample_size = length(sim_data[[i]]$x)
stan_dat <- list(x = sim_data[[i]]$x,
N = nrow(sim_data[[i]]),
counts = sim_data[[i]]$counts,
xmax = sim_data[[i]]$xmax_x,
xmin = sim_data[[i]]$xmin_x)
fit <- sampling(object = fit_model,
data = stan_dat,
iter = 1000,
chains = 2,
open_progress = F,
verbose = F)
posts_single[[i]] = as_draws_df(fit) %>%
mutate(true_lambda = true_lambda,
crop = crop,
rep = rep,
sizes = sizes,
cropped_sample_size = cropped_sample_size)
}
recover_sims = bind_rows(posts_single)
parameter_recovery_withcounts = recover_sims %>%
group_by(crop, rep, true_lambda, sizes) %>%
median_qi(lambda) %>%
rename(b_modeled = lambda) %>%
mutate(crop = case_when(crop == 0 & grepl("smallest", sizes) ~ 1, TRUE ~ crop))
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.01)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda") +
scale_x_log10() +
theme_default()
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.01)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda",
color = "True Lambda") +
scale_x_log10() +
scale_color_colorblind() +
theme_default()
parameter_recovery_withcounts
parameter_recovery_withcounts = recover_sims %>%
group_by(crop, rep, true_lambda, sizes, cropped_sample_size) %>%
median_qi(lambda) %>%
rename(b_modeled = lambda) %>%
mutate(crop = case_when(crop == 0 & grepl("smallest", sizes) ~ 1, TRUE ~ crop))
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda),
size = cropped_sample_size),
position = position_jitter(width = 0.01)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda",
color = "True Lambda") +
scale_x_log10() +
scale_color_colorblind() +
theme_default()
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.01)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda",
color = "True Lambda") +
scale_x_log10() +
scale_color_colorblind() +
theme_default()
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.05)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda",
color = "True Lambda") +
scale_x_log10() +
scale_color_colorblind() +
theme_default()
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.03)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda",
color = "True Lambda") +
scale_x_log10() +
scale_color_colorblind() +
theme_default()
parameter_recovery_withcounts = recover_sims %>%
group_by(crop, rep, true_lambda, sizes, cropped_sample_size) %>%
median_qi(lambda) %>%
rename(b_modeled = lambda) %>%
mutate(crop = case_when(crop == 0 & grepl("smallest", sizes) ~ 1, TRUE ~ crop)) %>%
mutate(crop = case_when(sizes == "largest quantile" ~ 1-crop, TRUE ~ crop))
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.03)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda",
color = "True Lambda") +
scale_x_log10() +
scale_color_colorblind() +
theme_default()
recover_sims %>%
group_by(crop, rep, true_lambda, sizes, cropped_sample_size) %>%
median_qi(lambda) %>%
rename(b_modeled = lambda)
parameter_recovery_withcounts = recover_sims %>%
group_by(crop, rep, true_lambda, sizes, cropped_sample_size) %>%
median_qi(lambda) %>%
rename(b_modeled = lambda) %>%
mutate(crop = case_when(crop == 0 & grepl("smallest", sizes) ~ 1, TRUE ~ crop)) %>%
mutate(crop = case_when(sizes == "largest quantile" ~ crop-1, TRUE ~ crop))
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.03)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda",
color = "True Lambda") +
scale_x_log10() +
scale_color_colorblind() +
theme_default()
parameter_recovery_withcounts = recover_sims %>%
group_by(crop, rep, true_lambda, sizes, cropped_sample_size) %>%
median_qi(lambda) %>%
rename(b_modeled = lambda) %>%
mutate(crop = case_when(crop == 0 & grepl("smallest", sizes) ~ 1, TRUE ~ crop)) %>%
mutate(crop = case_when(sizes == "largest quantile" ~ 1-crop, TRUE ~ crop))
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.03)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda",
color = "True Lambda") +
scale_x_log10() +
scale_color_colorblind() +
theme_default()
parameter_recovery_withcounts %>%
ggplot(aes(x = 1-crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.03)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda",
color = "True Lambda") +
scale_x_log10() +
scale_color_colorblind() +
theme_default()
recover_sims %>%
group_by(crop, rep, true_lambda, sizes, cropped_sample_size) %>%
median_qi(lambda) %>%
rename(b_modeled = lambda) %>%
mutate(crop = case_when(crop == 0 & grepl("smallest", sizes) ~ 1, TRUE ~ crop))
parameter_recovery_withcounts = recover_sims %>%
group_by(crop, rep, true_lambda, sizes, cropped_sample_size) %>%
median_qi(lambda) %>%
rename(b_modeled = lambda) %>%
mutate(crop = case_when(crop == 0 & grepl("smallest", sizes) ~ 1, TRUE ~ crop)) %>%
mutate(crop = case_when(sizes == "largest quantile" ~ 1-crop, TRUE ~ crop))
recover_sims %>%
group_by(crop, rep, true_lambda, sizes, cropped_sample_size) %>%
median_qi(lambda) %>%
rename(b_modeled = lambda) %>%
mutate(crop = case_when(crop == 0 & grepl("smallest", sizes) ~ 1, TRUE ~ crop)) %>%
mutate(crop = case_when(sizes == "largest quantile" ~ 1-crop, TRUE ~ crop))
sim_b %>%
expand_grid(individual = 1:n_sim) %>%
mutate(u = runif(nrow(.), min = 0, max = 1),
sims = (u*xmax^(lambda+1) +  (1-u) * xmin^(lambda+1) ) ^ (1/(lambda+1))) %>%
group_by(lambda, xmin, xmax, group, sample_size, crop, rep) %>%
mutate(x = round(sims, 3)) %>%
count(x, name = "counts")
sim_b %>%
expand_grid(individual = 1:n_sim) %>%
mutate(u = runif(nrow(.), min = 0, max = 1),
sims = (u*xmax^(lambda+1) +  (1-u) * xmin^(lambda+1) ) ^ (1/(lambda+1))) %>%
group_by(lambda, xmin, xmax, group, sample_size, crop, rep) %>%
mutate(x = round(sims, 3)) %>%
count(x, name = "counts") %>%
mutate(limit = xmax*crop,
greater = case_when(x >= limit ~ 1,
crop == 0 ~ 1,
TRUE ~ 0),
crop = 1-crop,
sizes = "largest quantiles")
sim_largest = sim_b %>%
expand_grid(individual = 1:n_sim) %>%
mutate(u = runif(nrow(.), min = 0, max = 1),
sims = (u*xmax^(lambda+1) +  (1-u) * xmin^(lambda+1) ) ^ (1/(lambda+1))) %>%
group_by(lambda, xmin, xmax, group, sample_size, crop, rep) %>%
mutate(x = round(sims, 3)) %>%
count(x, name = "counts") %>%
mutate(limit = xmax*crop,
greater = case_when(x >= limit ~ 1,
crop == 0 ~ 1,
TRUE ~ 0),
crop = 1-crop,
sizes = "largest quantiles") %>%
filter(greater == 1)
sim_data_tibble = bind_rows(sim_largest, sim_smallest) %>%
group_by(crop, lambda, rep, sizes) %>%
mutate(group = cur_group_id())
sim_data = sim_data_tibble %>%
group_by(crop, rep, lambda, sizes) %>%
mutate(xmin_x = min(x),
xmax_x = max(x)) %>%
group_split()
# preallocate
posts_single = list()
# fit
for (i in 1:max(sim_data_tibble$group)) {
true_lambda = unique(sim_data[[i]]$lambda)
crop = unique(sim_data[[i]]$crop)
rep = unique(sim_data[[i]]$rep)
sizes = unique(sim_data[[i]]$sizes)
cropped_sample_size = length(sim_data[[i]]$x)
stan_dat <- list(x = sim_data[[i]]$x,
N = nrow(sim_data[[i]]),
counts = sim_data[[i]]$counts,
xmax = sim_data[[i]]$xmax_x,
xmin = sim_data[[i]]$xmin_x)
fit <- sampling(object = fit_model,
data = stan_dat,
iter = 1000,
chains = 2,
open_progress = F,
verbose = F)
posts_single[[i]] = as_draws_df(fit) %>%
mutate(true_lambda = true_lambda,
crop = crop,
rep = rep,
sizes = sizes,
cropped_sample_size = cropped_sample_size)
}
parameter_recovery_withcounts %>%
ggplot(aes(x = crop, y = b_modeled, group = true_lambda)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper, color = as.factor(true_lambda)),
position = position_jitter(width = 0.03)) +
geom_hline(yintercept = b, linetype = "dotted") +
facet_grid(true_lambda ~ sizes) +
# guides(color = "none") +
labs(title = "Analyzing just fish leads to bad estimates",
subtitle = "Dotted line is the true lambda",
x = "Proportion of sizes kept relative to xmax",
y = "Lambda",
color = "True Lambda") +
scale_x_log10() +
scale_color_colorblind() +
theme_default()
saveRDS(parameter_recovery_withcounts, file = "posteriors/sandbox/parameter_recovery_withcounts.rds")
