sims = (u*xmax^(lambda+1) +  (1-u) * xmin^(lambda+1) ) ^ (1/(lambda+1)))
sim_data
rparetocounts <- function(n, mu, vreal1, vreal2, vreal3) {
samples <- numeric(n)
for (i in 1:n) {
if (mu != -1) {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if vreal3^(mu + 1) >= vreal2^(mu + 1)
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (u*xmax^(lambda+1) +  (1-u) * xmin^(lambda+1) ) ^ (1/(lambda+1))
}
} else {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if log(vreal2) - log(vreal3) <= 0
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (exp(u) - vreal2)
}
}
}
return(samples)
}
rparetocounts <- function(n, mu, vreal1, vreal2, vreal3) {
samples <- numeric(n)
for (i in 1:n) {
if (mu != -1) {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if vreal3^(mu + 1) >= vreal2^(mu + 1)
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (u*vreal2^(mu+1) +  (1-u) * vreal1^(mu+1) ) ^ (1/(mu+1))
}
} else {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if log(vreal2) - log(vreal3) <= 0
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (exp(u) - vreal2)
}
}
}
return(samples)
}
rparetocounts <- function(n, mu, vreal2, vreal3) {
samples <- numeric(n)
for (i in 1:n) {
if (mu != -1) {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if vreal3^(mu + 1) >= vreal2^(mu + 1)
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (u*vreal2^(mu+1) +  (1-u) * vreal1^(mu+1) ) ^ (1/(mu+1))
}
} else {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if log(vreal2) - log(vreal3) <= 0
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (exp(u) - vreal2)
}
}
}
return(samples)
}
rparetocounts(100, -1.2, 1, 1000)
rparetocounts <- function(n, mu, vreal2, vreal3) {
samples <- numeric(n)
for (i in 1:n) {
if (mu != -1) {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if vreal3^(mu + 1) >= vreal2^(mu + 1)
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (u*vreal2^(mu+1) +  (1-u) * vreal1^(mu+1) ) ^ (1/(mu+1))
}
} else {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if log(vreal2) - log(vreal3) <= 0
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (exp(u) - vreal2)
}
}
}
return(samples)
}
rparetocounts(100, -1.2, 1, 1000)
rparetocounts <- function(n, mu, vreal2, vreal3) {
samples <- numeric(n)
for (i in 1:n) {
if (mu != -1) {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if vreal3^(mu + 1) >= vreal2^(mu + 1)
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
}
} else {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if log(vreal2) - log(vreal3) <= 0
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (exp(u) - vreal2)
}
}
}
return(samples)
}
rparetocounts(100, -1.2, 1, 1000)
rparetocounts(100, -1, 1, 1000)
rparetocounts(100, -1, 1, 1000)
rparetocounts(100, -1, 1, 1000)
rparetocounts(100, -1, 1, 1000)
rparetocounts(100, -1, 1, 1000)
rparetocounts(100, -1, 1, 1000)
rparetocounts(100, -1, 1, 1000)
rparetocounts(100, -1.01, 1, 1000)
rparetocounts(100, -1.01, 1, 1000)
rparetocounts(100, -0.99, 1, 1000)
rparetocounts(100, -0.99, 1, 1000)
rparetocounts(100, 1, 1, 1000)
rparetocounts(100, 1, 1, 1000)
rparetocounts(100, 1, 1, 1000)
rparetocounts(100, 1, 1, 1000)
rparetocounts(100, 1, 1, 1000)
rparetocounts(100, -1, 1, 1000)
rparetocounts(100, -1, 1, 1000)
rparetocounts(100, -1, 1, 1000)
rparetocounts(100, -1, 1, 1000)
plot(rparetocounts(100, -1, 1, 1000))
plot(rparetocounts(100, -1, 1, 1000))
plot(rparetocounts(100, -1, 1, 1000))
plot(rparetocounts(100, -1.01, 1, 1000))
plot(rparetocounts(100, -1.01, 1, 1000))
u <- runif(1, min = 0, max = 1)
vreal3 = 1000
vreal2 = 1
mu = -1.1
u <- runif(1, min = 0, max = 1)
(u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
u <- runif(1, min = 0, max = 1)
(u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
mu = -1
u <- runif(1, min = 0, max = 1)
(u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
(u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
(u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
(u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
(u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
(u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
(u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
rparetocounts <- function(n, mu, vint1, vreal1, vreal2) {
result <- numeric(n)
for (i in 1:n) {
if (mu != -1) {
p <- runif(1, 0, 1)
c <- log((mu + 1) / (vreal2^(mu + 1) - vreal1^(mu + 1)))
y <- (p / (vint1 * c))^((vreal2^(mu + 1) - vreal1^(mu + 1)) / (mu + 1)) - 1
} else {
p <- runif(1, 0, 1)
c <- log(log(vreal1) - log(vreal2))
y <- exp(p / (vint1 * c)) - 1
}
result[i] <- y
}
result
}
rparetocounts(10, -1.2, 2, 1, 1000)
rparetocounts(10, 1.2, 2, 1, 1000)
rparetocounts <- function(n, mu, vint1, vreal1, vreal2) {
result <- numeric(n)
for (i in 1:n) {
if (mu != -1) {
p <- runif(1, 0, 1)
c <- log((mu + 1) / (vreal2^(mu + 1) - vreal1^(mu + 1)))
y <- ((vint1 * c * p)^(1 / (vreal2^(mu + 1) - vreal1^(mu + 1))) - 1)^(1 / mu)
} else {
p <- runif(1, 0, 1)
c <- log(log(vreal1) - log(vreal2))
y <- exp((vint1 * c * p)^(1 / mu)) - 1
}
result[i] <- y
}
result
}
rparetocounts(10, -1.2, 2, 1, 1000)
rparetocounts <- function(n, mu, vreal2, vreal3) {
samples <- numeric(n)
for (i in 1:n) {
if (mu != -1) {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if vreal3^(mu + 1) >= vreal2^(mu + 1)
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
}
} else {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if log(vreal2) - log(vreal3) <= 0
} else {
samples[i] <- NaN
}
}
}
return(samples)
}
plot(rparetocounts(100, -1.01, 1, 1000))
rparetocounts <- function(n, mu, vreal2, vreal3) {
samples <- numeric(n)
for (i in 1:n) {
if (mu != -1) {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if vreal3^(mu + 1) >= vreal2^(mu + 1)
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
}
} else {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if log(vreal2) - log(vreal3) <= 0
} else {
samples[i] <- NaN
}
}
}
return(samples)
}
plot(rparetocounts(100, -1.01, 1, 1000))
plot(rparetocounts(100, -1., 1, 1000))
plot(rparetocounts(100, -1, 1, 1000))
plot(rparetocounts(100, -1.2, 1, 1000))
sizeSpectra::rPLB(100, -1.2, 1, 1000)
plot(sizeSpectra::rPLB(100, -1.2, 1, 1000))
plot(rparetocounts(100, -1.2, 1, 1000))
plot(sizeSpectra::rPLB(100, -1.2, 1, 1000))
plot(rparetocounts(100, -1.2, 1, 1000))
plot(sizeSpectra::rPLB(100, -1.2, 1, 1000))
rparetocounts <- function(n, mu, vreal2, vreal3) {
samples <- numeric(n)
for (i in 1:n) {
if (mu != -1) {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if vreal3^(mu + 1) >= vreal2^(mu + 1)
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
}
} else {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if log(vreal2) - log(vreal3) <= 0
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <-  xmax^u * xmin^(1-u)
}
}
}
return(samples)
}
plot(rparetocounts(100, -1.2, 1, 1000))
plot(rparetocounts(100, -1, 1, 1000))
plot(rparetocounts(100, -1, 1, 1000))
rparetocounts <- function(n, mu, vreal2, vreal3) {
samples <- numeric(n)
for (i in 1:n) {
if (mu != -1) {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if vreal3^(mu + 1) >= vreal2^(mu + 1)
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
}
} else {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if log(vreal2) - log(vreal3) <= 0
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <-  xmax^u * xmin^(1-u)
}
}
}
return(samples)
}
source("code/pareto_brm.R")
rparetocounts <- function(n, mu, vreal2, vreal3) {
samples <- numeric(n)
for (i in 1:n) {
if (mu != -1) {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if vreal3^(mu + 1) >= vreal2^(mu + 1)
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <- (u*vreal3^(mu+1) +  (1-u) * vreal2^(mu+1) ) ^ (1/(mu+1))
}
} else {
if (vreal2 >= vreal3) {
samples[i] <- NaN  # Set sample to NaN if log(vreal2) - log(vreal3) <= 0
} else {
u <- runif(1, min = 0, max = 1)
samples[i] <-  xmax^u * xmin^(1-u)
}
}
}
return(samples)
}
rparetocounts(10, -1.4, 1, 1000)
rparetocounts(10, -1.4, 0.1, 1000)
rparetocounts(10, -1.4, 0.1, 10)
rparetocounts(100, -1.4, 0.1, 10)
rparetocounts(1000, -1.4, 0.1, 10)
rparetocounts(1000, -1, 0.1, 10)
rparetocounts(1000, -1, 0.1, 10)
rparetocounts(1000, -1.1, 0.1, 10)
rparetocounts(1000, -1, 0.1, 10)
rparetocounts(1000, -1.000001, 0.1, 10)
rparetocounts(1000, -1.000001, 0.1, 10)
sizeSpectra::rPLB(1000, -1, 1, 1000)
sizeSpectra::rPLB(1000, -1, .1, 10)
rparetocounts(1000, -1, 0.1, 10)
source("code/pareto_brm.R")
rparetocounts(1000, -1, 0.1, 10)
rparetocounts(1000, -1, 1, 1000)
rparetocounts(1000, -1.2, 1, 1000)
rparetocounts(1000, -1.9, 1, 1000)
hist(rparetocounts(1000, -1.9, 1, 1000))
hist(rparetocounts(1000, 0, 1, 1000))
hist(rparetocounts(1000, 1, 1, 1000))
hist(rparetocounts(1000, 1.9, 1, 1000))
hist(rparetocounts(1000, 2.9, 1, 1000))
hist(rparetocounts(1000, -7, 1, 1000))
hist(rparetocounts(1000, -1, 1, 1000))
hist(rparetocounts(1000, -2, 1, 1000))
hist(rparetocounts(1000, -2.2, 1, 1000))
hist(rparetocounts(1000, -1.2, 1, 1000))
rparetocounts(1000, -1.2, 1, 1000)
sim_data = tibble(dw = rparetocounts(1000, -1.2, 1, 1000).
sim_data = tibble(dw = rparetocounts(1000, -1.2, 1, 1000).
sim_data = tibble(dw = rparetocounts(1000, -1.2, 1, 1000)) %>%
mutate(sample = 1,
xmin = 1,
xmax = 1000,
counts = 1)
fit_brm = brm(dw ~ 1,
data = sim_data,
family = paretocounts,
prior = c(prior(normal(-1.2, 0.1), class = "Intercept")))
sim_data = tibble(dw = rparetocounts(1000, -1.2, 1, 1000)) %>%
mutate(sample = 1,
vreal2 = 1,
vreal3 = 1000,
vreal1 = 1)
fit_brm = brm(dw ~ 1,
data = sim_data,
family = paretocounts,
prior = c(prior(normal(-1.2, 0.1), class = "Intercept")))
sim_data
sim_data = tibble(dw = rparetocounts(1000, -1.2, 1, 1000)) %>%
mutate(sample = 1,
xmin = 1,
xmax = 1000,
counts = 1)
fit_brm = brm(dw | vreal(counts, xmin, xmax) ~ 1,
data = sim_data,
family = paretocounts,
prior = c(prior(normal(-1.2, 0.1), class = "Intercept")))
paretocounts <- custom_family(
"paretocounts", dpars = c("mu"),
links = c("identity"),
lb = -Inf, ub = Inf,
type = "real", vars = c("vreal1[n]",
"vreal2[n]",
"vreal3[n]"))
stan_funs <- "
real paretocounts_lpdf(real Y, real mu, real vreal1, real vreal2, real vreal3){
if(mu != -1)
return(vreal1*(log((mu+1) / ( vreal3^(mu+1) - vreal2^(mu+1))) + mu*log(Y)));
else
return(vreal1*(log(log(vreal2) - log(vreal3)) + mu*log(Y)));
}
"
stanvars <- stanvar(scode = stan_funs, block = "functions")
sim_data
fit_brm = brm(dw | vreal(counts, xmin, xmax) ~ 1,
data = sim_data,
family = paretocounts)
make_stancode(dw | vreal(counts, xmin, xmax) ~ 1,
data = sim_data,
family = paretocounts)
sim_data = tibble(dw = rparetocounts(1000, -1.2, 1, 1000)) %>%
mutate(sample = 1,
xmin = 1,
xmax = 1000,
counts = 1)
fit_brm = brm(dw | vreal(counts, xmin, xmax) ~ 1,
data = sim_data,
family = paretocounts,
stanvars = stanvars)
fit_brm
sim_data = tibble(dw = rparetocounts(100, -1.2, 1, 1000)) %>%
mutate(sample = 1,
xmin = 1,
xmax = 1000,
counts = 1)
fit_brm = update(fit_brm, newdata = sim_data)
fit_brm
sim_data = tibble(dw = rparetocounts(100, -1.2, 1, 1000)) %>%
mutate(sample = 1,
xmin = 1,
xmax = 1000,
counts = 1)
fit_brm = update(fit_brm, newdata = sim_data)
fit_brm
sim_data = tibble(dw = rparetocounts(300, -1.2, 1, 1000)) %>%
mutate(sample = 1,
xmin = 1,
xmax = 1000,
counts = 1)
fit_brm = update(fit_brm, newdata = sim_data)
fit_brm
library(tidybayes)
fit_brm$data %>%
add_epred_draws(fit_brm)
log_lik_logitnormal <- function(i, prep) {
mu <- brms::get_dpar(prep, "mu", i = i)
sigma <- brms::get_dpar(prep, "sigma", i = i)
y <- prep$data$Y[i]
dlogitnormal(y, mu, sigma, log = TRUE)
}
dparetocounts <- function(x, mu, vreal2, vreal3) {
if (vreal2 <= 0 || vreal2 >= vreal3)
stop("Parameters out of bounds in dPLB")
if (mu != -1) {
density <- (mu + 1) * (x^(mu+1)) / (vreal3^(mu+1) - vreal2^(mu+1))
} else {
density <- x^(-2) / (vreal2 * log(vreal3/vreal2))
}
density
}
dparetocounts(10, -1.2, 1, 1000)
dparetocounts(10, -1.2, 1, 1000)
dparetocounts(10, -1.2, 1, 1000)
dparetocounts(0.1, -1.2, 1, 1000)
dparetocounts(10, -1.2, 1, 1000)
dparetocounts(1000, -1.2, 1, 1000)
dparetocounts(0.001, -1.2, 1, 1000)
dparetocounts <- function(x, mu, vreal2, vreal3) {
if (vreal2 <= 0 || vreal2 >= vreal3)
stop("Parameters out of bounds in dPLB")
if (x < vreal2 || x > vreal3)
return(0)
if (mu != -1) {
density <- (mu + 1) * (x^(mu+1)) / (vreal3^(mu+1) - vreal2^(mu+1))
} else {
density <- x^(-2) / (vreal2 * log(vreal3/vreal2))
}
density
}
dparetocounts(0.001, -1.2, 1, 1000)
dparetocounts(1, -1.2, 1, 1000)
dparetocounts(1000, -1.2, 1, 1000)
dparetocounts(1001, -1.2, 1, 1000)
log_lik_paretocounts <- function(i, prep) {
mu <- brms::get_dpar(prep, "mu", i = i)
y <- prep$data$Y[i]
dparetocounts(x, mu, vreal2, vreal3)
}
posterior_epred_paretocounts <- function(prep) {
mu <- prep$dpars$mu
return(mu)
}
posterior_predict_paretocounts <- function(i, prep, ...) {
mu <- brms::get_dpar(prep, "mu", i = i)
rparetocounts(prep$ndraws, mu, vreal2, vreal3)
}
posterior_epred_paretocounts <- function(prep) {
mu <- prep$dpars$mu
return(mu)
}
paretocounts <- custom_family(
"paretocounts", dpars = c("mu"),
links = c("identity"),
lb = -Inf, ub = Inf,
type = "real", vars = c("vreal1[n]",
"vreal2[n]",
"vreal3[n]"))
stan_funs <- "
real paretocounts_lpdf(real Y, real mu, real vreal1, real vreal2, real vreal3){
if(mu != -1)
return(vreal1*(log((mu+1) / ( vreal3^(mu+1) - vreal2^(mu+1))) + mu*log(Y)));
else
return(vreal1*(log(log(vreal2) - log(vreal3)) + mu*log(Y)));
}
"
stanvars <- stanvar(scode = stan_funs, block = "functions")
log_lik_paretocounts <- function(i, prep) {
mu <- brms::get_dpar(prep, "mu", i = i)
y <- prep$data$Y[i]
dparetocounts(x, mu, vreal2, vreal3)
}
posterior_predict_paretocounts <- function(i, prep, ...) {
mu <- brms::get_dpar(prep, "mu", i = i)
rparetocounts(prep$ndraws, mu, vreal2, vreal3)
}
posterior_epred_paretocounts <- function(prep) {
mu <- prep$dpars$mu
return(mu)
}
fit2
fit
fit_brm
conditional_effects(fit_brm)
fitted(fit_brm)
