geom_ribbon(data = post_preds  , aes(y = y_order + 1,
ymin = ymin + 1,
ymax = ymax + 1), alpha = 0.2) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~true_value) +
theme_default() +
theme(
strip.background = element_blank(),
# strip.text.x = element_blank(),
axis.text = element_blank()) +
labs(y = "Number of values \u2265 x",
x = "Individual dry mass (mg)",
color = "") +
guides(color = "none") +
coord_cartesian(ylim = c(limits = c(min(dat_toplot$y_order), NA)))
dat_toplot %>%
ggplot(aes(x = dw, y = y_order, group = true_value)) +
geom_point(shape = 21, size = 0.3) +
geom_line(data = post_preds, aes(y = y_order + 1)) +
geom_ribbon(data = post_preds  , aes(y = y_order + 1,
ymin = ymin + 1,
ymax = ymax + 1), alpha = 0.2) +
scale_x_log10() +
scale_y_log10(limits = c(1, NA)) +
facet_wrap(~true_value) +
theme_default() +
theme(
strip.background = element_blank(),
# strip.text.x = element_blank(),
axis.text = element_blank()) +
labs(y = "Number of values \u2265 x",
x = "Individual dry mass (mg)",
color = "") +
guides(color = "none") +
coord_cartesian(ylim = c(limits = c(min(dat_toplot$y_order), NA)))
dat_toplot %>%
ggplot(aes(x = dw, y = y_order, group = true_value)) +
geom_point(shape = 21, size = 0.3) +
geom_line(data = post_preds, aes(y = y_order + 1)) +
geom_ribbon(data = post_preds  , aes(y = y_order + 1,
ymin = ymin + 1,
ymax = ymax + 1), alpha = 0.2) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~true_value) +
theme_default() +
theme(
strip.background = element_blank(),
# strip.text.x = element_blank(),
axis.text = element_blank()) +
labs(y = "Number of values \u2265 x",
x = "Individual dry mass (mg)",
color = "") +
guides(color = "none") +
coord_cartesian(ylim = c(limits = c(1, NA)))
dat_toplot %>%
ggplot(aes(x = dw, y = y_order, group = true_value)) +
geom_point(shape = 21, size = 0.3) +
geom_line(data = post_preds) +
geom_ribbon(data = post_preds  , aes(ymin = ymin,
ymax = ymax), alpha = 0.2) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~true_value) +
theme_default() +
theme(
strip.background = element_blank(),
# strip.text.x = element_blank(),
axis.text = element_blank()) +
labs(y = "Number of values \u2265 x",
x = "Individual dry mass (mg)",
color = "") +
guides(color = "none") +
coord_cartesian(ylim = c(limits = c(1, NA)))
xy.PLB_data[[i]] = tibble(dw = x.PLB,
y_order = y.PLB + 1,
ymin = ymin.PLB + 1,
ymax = ymax.PLB + 1,
xmax = xmax,
xmin = xmin) %>%
mutate(true_value = true_value,
# site_id = site_id,
# year = year,
lambda = lambda)
for(i in 1:length(dat_split)) {
true_value = unique(dat_split[[i]]$true_value)
# site_id = unique(dat_split[[i]]$site_id)
# year = unique(dat_split[[i]]$year)
xmin = min(dat_split[[i]]$dw)
xmax = max(dat_split[[i]]$dw)
lambda = unique(dat_split[[i]]$lambda)
.lower = unique(dat_split[[i]]$.lower)
.upper = unique(dat_split[[i]]$.upper)
x.PLB = unique(dat_split[[i]]$dw) # x values to plot PLB
y.PLB = (1 - (x.PLB^(lambda + 1) - (xmin^(lambda+1)))/(xmax^(lambda + 1) - (xmin^(lambda+1))))*nsamples
ymin.PLB = (1 - (x.PLB^(.lower + 1) - (xmin^(.lower+1)))/(xmax^(.lower + 1) - (xmin^(.lower+1))))*nsamples
ymax.PLB = (1 - (x.PLB^(.upper + 1) - (xmin^(.upper+1)))/(xmax^(.upper + 1) - (xmin^(.upper+1))))*nsamples
xy.PLB_data[[i]] = tibble(dw = x.PLB,
y_order = y.PLB + 1,
ymin = ymin.PLB + 1,
ymax = ymax.PLB + 1,
xmax = xmax,
xmin = xmin) %>%
mutate(true_value = true_value,
# site_id = site_id,
# year = year,
lambda = lambda)
}
post_preds = bind_rows(xy.PLB_data) %>%
mutate(true_value = round(true_value, 1))
dat_toplot %>%
ggplot(aes(x = dw, y = y_order, group = true_value)) +
geom_point(shape = 21, size = 0.3) +
geom_line(data = post_preds) +
geom_ribbon(data = post_preds  , aes(ymin = ymin,
ymax = ymax), alpha = 0.2) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~true_value) +
theme_default() +
theme(
strip.background = element_blank(),
# strip.text.x = element_blank(),
axis.text = element_blank()) +
labs(y = "Number of values \u2265 x",
x = "Individual dry mass (mg)",
color = "") +
guides(color = "none") +
coord_cartesian(ylim = c(limits = c(1, NA)))
dat_sims %>%
# filter(sample_int %in% c(id)) %>%
group_by(true_value) %>%
arrange(desc(dw)) %>%
mutate(y_order = 1:nsamples,
true_value = round(true_value, 1))
dat_toplot = dat_sims %>%
# filter(sample_int %in% c(id)) %>%
group_by(true_value) %>%
arrange(desc(dw)) %>%
mutate(y_order = 1:nsamples - 1,
true_value = round(true_value, 1))
dat_split = dat_sims %>%
# filter(sample_int %in% c(id)) %>%
group_by(true_value) %>%
group_split
xy.PLB = NULL
for(i in 1:length(dat_split)) {
true_value = unique(dat_split[[i]]$true_value)
# site_id = unique(dat_split[[i]]$site_id)
# year = unique(dat_split[[i]]$year)
xmin = min(dat_split[[i]]$dw)
xmax = max(dat_split[[i]]$dw)
lambda = unique(dat_split[[i]]$lambda)
.lower = unique(dat_split[[i]]$.lower)
.upper = unique(dat_split[[i]]$.upper)
x.PLB = seq(min(dat_split[[i]]$dw),
max(dat_split[[i]]$dw),
length=nsamples) # x values to plot PLB
y.PLB = (1 - (x.PLB^(lambda + 1) - (xmin^(lambda+1)))/(xmax^(lambda + 1) - (xmin^(lambda+1))))*nsamples
ymin.PLB = (1 - (x.PLB^(.lower + 1) - (xmin^(.lower+1)))/(xmax^(.lower + 1) - (xmin^(.lower+1))))*nsamples
ymax.PLB = (1 - (x.PLB^(.upper + 1) - (xmin^(.upper+1)))/(xmax^(.upper + 1) - (xmin^(.upper+1))))*nsamples
xy.PLB[[i]] = tibble(dw = x.PLB, y_order = y.PLB,
ymin = ymin.PLB,
ymax = ymax.PLB,
xmax = xmax,
xmin = xmin) %>%
mutate(true_value = true_value,
# site_id = site_id,
# year = year,
lambda = lambda)
}
lines_toplot = bind_rows(xy.PLB) %>%
mutate(true_value = round(true_value, 1))
isd_single_samples_plot = dat_toplot %>%
ggplot(aes(x = dw, y = y_order, group = true_value)) +
geom_point(shape = 21, size = 0.3) +
geom_line(data = lines_toplot ) +
geom_ribbon(data = lines_toplot  , aes(ymin = ymin, ymax = ymax), alpha = 0.2) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~true_value) +
theme_default() +
theme(
strip.background = element_blank(),
# strip.text.x = element_blank(),
axis.text = element_blank()) +
labs(y = "Number of values \u2265 x",
x = "Individual dry mass (mg)",
color = "") +
guides(color = "none") +
coord_cartesian(ylim = c(limits = c(min(dat_toplot$y_order), NA)))
isd_single_samples_plot
isd_single_samples_plot = dat_toplot %>%
ggplot(aes(x = dw, y = y_order, group = true_value)) +
geom_point(shape = 21, size = 0.3) +
geom_line(data = lines_toplot ) +
geom_ribbon(data = lines_toplot  , aes(ymin = ymin, ymax = ymax), alpha = 0.2) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~true_value) +
theme_default() +
theme(
strip.background = element_blank(),
# strip.text.x = element_blank(),
axis.text = element_blank()) +
labs(y = "Number of values \u2265 x",
x = "Individual dry mass (mg)",
color = "") +
guides(color = "none")
isd_single_samples_plot
library(brms)
library(tidyverse)
library(tidybayes)
library(janitor)
# single samples ----------------------------------------------------------
# get data
sim_data = readRDS(file = "data/sim_data.rds") %>%
bind_rows() %>%
rename(true_value = b,
dw = x)
# load posteriors
recover_sims = readRDS(file = "posteriors/recover_sims_counts.rds")
# median lambdas
posts_medians = recover_sims %>%
group_by(true_value) %>%
median_qi(lambda)
# plot isd's --------------------------------------------------------------
# sample dw weighted by density
nsamples = 10000
dat_sims = sim_data %>%
left_join(posts_medians) %>%
group_by(true_value) %>%
sample_n(nsamples, weight = counts, replace = T) %>%
select(dw, true_value, xmin, xmax, counts, lambda, .lower, .upper)
dat_toplot = dat_sims %>%
# filter(sample_int %in% c(id)) %>%
group_by(true_value) %>%
arrange(desc(dw)) %>%
mutate(y_order = 1:nsamples - 1,
true_value = round(true_value, 1))
dat_split = dat_sims %>%
# filter(sample_int %in% c(id)) %>%
group_by(true_value) %>%
group_split
xy.PLB = NULL
for(i in 1:length(dat_split)) {
true_value = unique(dat_split[[i]]$true_value)
# site_id = unique(dat_split[[i]]$site_id)
# year = unique(dat_split[[i]]$year)
xmin = min(dat_split[[i]]$dw)
xmax = max(dat_split[[i]]$dw)
lambda = unique(dat_split[[i]]$lambda)
.lower = unique(dat_split[[i]]$.lower)
.upper = unique(dat_split[[i]]$.upper)
x.PLB = seq(min(dat_split[[i]]$dw),
max(dat_split[[i]]$dw),
length=nsamples) # x values to plot PLB
y.PLB = (1 - (x.PLB^(lambda + 1) - (xmin^(lambda+1)))/(xmax^(lambda + 1) - (xmin^(lambda+1))))*nsamples
ymin.PLB = (1 - (x.PLB^(.lower + 1) - (xmin^(.lower+1)))/(xmax^(.lower + 1) - (xmin^(.lower+1))))*nsamples
ymax.PLB = (1 - (x.PLB^(.upper + 1) - (xmin^(.upper+1)))/(xmax^(.upper + 1) - (xmin^(.upper+1))))*nsamples
xy.PLB[[i]] = tibble(dw = x.PLB, y_order = y.PLB,
ymin = ymin.PLB,
ymax = ymax.PLB,
xmax = xmax,
xmin = xmin) %>%
mutate(true_value = true_value,
# site_id = site_id,
# year = year,
lambda = lambda)
}
lines_toplot = bind_rows(xy.PLB) %>%
mutate(true_value = round(true_value, 1))
isd_single_samples_plot = dat_toplot %>%
ggplot(aes(x = dw, y = y_order, group = true_value)) +
geom_point(shape = 21, size = 0.3) +
geom_line(data = lines_toplot ) +
geom_ribbon(data = lines_toplot  , aes(ymin = ymin, ymax = ymax), alpha = 0.2) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~true_value) +
theme_default() +
theme(
strip.background = element_blank(),
# strip.text.x = element_blank(),
axis.text = element_blank()) +
labs(y = "Number of values \u2265 x",
x = "Individual dry mass (mg)",
color = "") +
guides(color = "none")
isd_single_samples_plot
ggsave(isd_single_samples_plot, file = "plots/isd_single_samples_plot.jpg",
width = 7, height = 7, dpi = 400)
xy.PLB_data = NULL
for(i in 1:length(dat_split)) {
true_value = unique(dat_split[[i]]$true_value)
# site_id = unique(dat_split[[i]]$site_id)
# year = unique(dat_split[[i]]$year)
xmin = min(dat_split[[i]]$dw)
xmax = max(dat_split[[i]]$dw)
lambda = unique(dat_split[[i]]$lambda)
.lower = unique(dat_split[[i]]$.lower)
.upper = unique(dat_split[[i]]$.upper)
x.PLB = unique(dat_split[[i]]$dw) # x values to plot PLB
y.PLB = (1 - (x.PLB^(lambda + 1) - (xmin^(lambda+1)))/(xmax^(lambda + 1) - (xmin^(lambda+1))))*nsamples
ymin.PLB = (1 - (x.PLB^(.lower + 1) - (xmin^(.lower+1)))/(xmax^(.lower + 1) - (xmin^(.lower+1))))*nsamples
ymax.PLB = (1 - (x.PLB^(.upper + 1) - (xmin^(.upper+1)))/(xmax^(.upper + 1) - (xmin^(.upper+1))))*nsamples
xy.PLB_data[[i]] = tibble(dw = x.PLB,
y_order = y.PLB + 1,
ymin = ymin.PLB + 1,
ymax = ymax.PLB + 1,
xmax = xmax,
xmin = xmin) %>%
mutate(true_value = true_value,
# site_id = site_id,
# year = year,
lambda = lambda)
}
post_preds = bind_rows(xy.PLB_data) %>%
mutate(true_value = round(true_value, 1))
dat_toplot %>%
ggplot(aes(x = dw, y = y_order, group = true_value)) +
geom_point(shape = 21, size = 0.3) +
geom_line(data = post_preds) +
geom_ribbon(data = post_preds  , aes(ymin = ymin,
ymax = ymax), alpha = 0.2) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~true_value) +
theme_default() +
theme(
strip.background = element_blank(),
# strip.text.x = element_blank(),
axis.text = element_blank()) +
labs(y = "Number of values \u2265 x",
x = "Individual dry mass (mg)",
color = "") +
guides(color = "none") +
coord_cartesian(ylim = c(limits = c(1, NA)))
dat_toplot %>%
left_join(post_preds %>% select(dw, ymin, ymax, true_value, y_order) %>%
rename(y_median = y_order))
post_preds
dat_toplot
View(dat_toplot)
dat_toplot %>%
left_join(post_preds %>% select(dw, ymin, ymax, true_value, y_order) %>%
rename(y_median = y_order)) %>% View()
xy.PLB_data = NULL
for(i in 1:length(dat_split)) {
true_value = unique(dat_split[[i]]$true_value)
# site_id = unique(dat_split[[i]]$site_id)
# year = unique(dat_split[[i]]$year)
xmin = min(dat_split[[i]]$dw)
xmax = max(dat_split[[i]]$dw)
lambda = unique(dat_split[[i]]$lambda)
.lower = unique(dat_split[[i]]$.lower)
.upper = unique(dat_split[[i]]$.upper)
x.PLB = unique(dat_split[[i]]$dw) # x values to plot PLB
y.PLB = (1 - (x.PLB^(lambda + 1) - (xmin^(lambda+1)))/(xmax^(lambda + 1) - (xmin^(lambda+1))))*nsamples
ymin.PLB = (1 - (x.PLB^(.lower + 1) - (xmin^(.lower+1)))/(xmax^(.lower + 1) - (xmin^(.lower+1))))*nsamples
ymax.PLB = (1 - (x.PLB^(.upper + 1) - (xmin^(.upper+1)))/(xmax^(.upper + 1) - (xmin^(.upper+1))))*nsamples
xy.PLB_data[[i]] = tibble(dw = x.PLB,
y_order = y.PLB,
ymin = ymin.PLB,
ymax = ymax.PLB + 1,
xmax = xmax,
xmin = xmin) %>%
mutate(true_value = true_value,
# site_id = site_id,
# year = year,
lambda = lambda)
}
post_preds = bind_rows(xy.PLB_data) %>%
mutate(true_value = round(true_value, 1))
dat_toplot %>%
left_join(post_preds %>% select(dw, ymin, ymax, true_value, y_order) %>%
rename(y_median = y_order)) %>% View()
dat_toplot %>%
left_join(post_preds %>% select(dw, ymin, ymax, true_value, y_order) %>%
rename(y_median = y_order)) %>%
mutate(deviance = y_median - y_order)
deviance = dat_toplot %>%
left_join(post_preds %>% select(dw, ymin, ymax, true_value, y_order) %>%
rename(y_median = y_order)) %>%
mutate(deviance = y_median - y_order)
deviance
deviance %>%
ggplot(aes(x = deviance)) +
geom_histogram() +
facet_wrap(~true_value)
deviance %>%
ggplot(aes(x = dw, y = deviance)) +
geom_point() +
facet_wrap(~true_value)
deviance %>%
ggplot(aes(x = dw, y = deviance)) +
geom_line() +
facet_wrap(~true_value) +
scale_x_log10()
deviance %>%
ggplot(aes(x = dw, y = deviance)) +
geom_line() +
facet_wrap(~true_value) +
scale_x_log10() +
scale_y_log10()
deviance %>%
ggplot(aes(x = dw, y = deviance)) +
geom_line() +
facet_wrap(~true_value) +
scale_x_log10()
deviance %>%
ggplot(aes(x = y_order, y = y_median)) +
geom_point() +
facet_wrap(~true_value)
deviance %>%
ggplot(aes(x = y_order, y = y_median)) +
geom_point() +
facet_wrap(~true_value) +
geom_abline()
# get data
sim_data = readRDS(file = "data/sim_data_test.rds") %>%
bind_rows() %>%
rename(true_value = b,
dw = x)
# load posteriors
recover_sims = readRDS(file = "posteriors/recover_sims_counts_test.rds")
# median lambdas
posts_medians = recover_sims %>%
group_by(true_value) %>%
median_qi(lambda)
# sample dw weighted by density
nsamples = 10000
dat_sims = sim_data %>%
left_join(posts_medians) %>%
group_by(true_value) %>%
sample_n(nsamples, weight = counts, replace = T) %>%
select(dw, true_value, xmin, xmax, counts, lambda, .lower, .upper)
dat_toplot = dat_sims %>%
# filter(sample_int %in% c(id)) %>%
group_by(true_value) %>%
arrange(desc(dw)) %>%
mutate(y_order = 1:nsamples - 1,
true_value = round(true_value, 1))
dat_split = dat_sims %>%
# filter(sample_int %in% c(id)) %>%
group_by(true_value) %>%
group_split
xy.PLB_data = NULL
for(i in 1:length(dat_split)) {
true_value = unique(dat_split[[i]]$true_value)
# site_id = unique(dat_split[[i]]$site_id)
# year = unique(dat_split[[i]]$year)
xmin = min(dat_split[[i]]$dw)
xmax = max(dat_split[[i]]$dw)
lambda = unique(dat_split[[i]]$lambda)
.lower = unique(dat_split[[i]]$.lower)
.upper = unique(dat_split[[i]]$.upper)
x.PLB = unique(dat_split[[i]]$dw) # x values to plot PLB
y.PLB = (1 - (x.PLB^(lambda + 1) - (xmin^(lambda+1)))/(xmax^(lambda + 1) - (xmin^(lambda+1))))*nsamples
ymin.PLB = (1 - (x.PLB^(.lower + 1) - (xmin^(.lower+1)))/(xmax^(.lower + 1) - (xmin^(.lower+1))))*nsamples
ymax.PLB = (1 - (x.PLB^(.upper + 1) - (xmin^(.upper+1)))/(xmax^(.upper + 1) - (xmin^(.upper+1))))*nsamples
xy.PLB_data[[i]] = tibble(dw = x.PLB,
y_order = y.PLB,
ymin = ymin.PLB,
ymax = ymax.PLB + 1,
xmax = xmax,
xmin = xmin) %>%
mutate(true_value = true_value,
# site_id = site_id,
# year = year,
lambda = lambda)
}
post_preds = bind_rows(xy.PLB_data) %>%
mutate(true_value = round(true_value, 1))
dat_toplot %>%
ggplot(aes(x = dw, y = y_order, group = true_value)) +
geom_point(shape = 21, size = 0.3) +
geom_line(data = post_preds) +
geom_ribbon(data = post_preds  , aes(ymin = ymin,
ymax = ymax), alpha = 0.2) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~true_value) +
theme_default() +
theme(
strip.background = element_blank(),
# strip.text.x = element_blank(),
axis.text = element_blank()) +
labs(y = "Number of values \u2265 x",
x = "Individual dry mass (mg)",
color = "") +
guides(color = "none") +
coord_cartesian(ylim = c(limits = c(1, NA)))
deviance = dat_toplot %>%
left_join(post_preds %>% select(dw, ymin, ymax, true_value, y_order) %>%
rename(y_median = y_order)) %>%
mutate(deviance = y_median - y_order)
deviance %>%
ggplot(aes(x = deviance)) +
geom_histogram() +
facet_wrap(~true_value)
deviance %>%
ggplot(aes(x = dw, y = deviance)) +
geom_line() +
facet_wrap(~true_value) +
scale_x_log10()
deviance %>%
ggplot(aes(x = y_order, y = y_median)) +
geom_point() +
facet_wrap(~true_value) +
geom_abline()
